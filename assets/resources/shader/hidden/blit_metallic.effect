// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:fragMetallic
      properties: &props
        mainTex:                    { value: white }
        blurTex:                    { value: white }
        overlayBlurTex:             { value: white }
        metalColor:                 { value: [1.0, 1.0, 1.0, 1.0] }
        sampleUV:                  { value: [1.0, 1.0]} 
        hueWeight:                 { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        satWeight:             { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        lumWeight:             { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        maskLow:                 { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        maskHigh:                { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        diffuseContrast:             { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        diffuseBias:             { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        blurOverlay:             { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        finalContrast:             { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        finalBias: { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
        gamaCorrection:             { value: 0.0, editor:  { slide: true, range: [0, 1.0], step: 0.001 } }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USElOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USElOCAL
      pos = cc_matWorld * pos; 
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color; 

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <units>
  uniform Constants {
    vec4 metalColor;
    vec2 sampleUV;
    float hueWeight;
    float satWeight;
    float lumWeight;
    float maskLow;
    float maskHigh;
    float diffuseContrast;
    float diffuseBias;
    float blurOverlay;
    float finalContrast;
    float finalBias;
    float gamaCorrection;
  };

  in vec4 color;
  in vec2 uv0;
  uniform sampler2D mainTex; 
  uniform sampler2D blurTex; 
  uniform sampler2D overlayBlurTex; 

  vec4 fragMetallic ()
	{
	
		vec2 UV = uv0;

		vec3 _mainTex = texture( mainTex,UV ).xyz;
		vec3 _blurTex = texture( blurTex, UV ).xyz;
		vec3 _overlayBlurTex = texture( overlayBlurTex, UV ).xyz;
		
		vec3 overlay = ( _mainTex - _overlayBlurTex );
		float overlayGrey = overlay.x * 0.3 + overlay.y * 0.5 + overlay.z * 0.2;
		
		vec3 metalSample = texture( blurTex, sampleUV ).xyz;
		
		vec3 mainTexHSL = RGBToHSL( _mainTex.xyz );
		vec3 blurTexHSL = RGBToHSL( _blurTex.xyz );
		vec3 metalHSL = RGBToHSL( metalColor.xyz );
		vec3 metalSampleHSL = metalHSL; //RGBToHSL( metalSample.xyz );
		
		float hueDif = 1.0 - min( min( abs( blurTexHSL.x - metalSampleHSL.x ), abs( ( blurTexHSL.x + 1.0 ) - metalSampleHSL.x ) ), abs( ( blurTexHSL.x - 1.0 ) - metalSampleHSL.x ) ) * 2.0;
		float satDif = 1.0 - abs( blurTexHSL.y - metalSampleHSL.y );
		float lumDif = 1.0 - abs( blurTexHSL.z - metalSampleHSL.z );
		
		float finalDiff = ( hueDif * hueWeight ) + ( satDif * satWeight ) + ( lumDif * lumWeight );
		finalDiff *= 1.0 / ( hueWeight + satWeight + lumWeight );
		finalDiff = smoothstep( maskLow, maskHigh, finalDiff );
		
		finalDiff = saturate( ( finalDiff - 0.5 ) * finalContrast + 0.5 + finalBias );
		finalDiff *= clamp( ( overlayGrey * blurOverlay ) + 1.0, 0.0, 10.0 );
		finalDiff = saturate( finalDiff );

		return vec4( finalDiff,finalDiff,finalDiff, 1.0 );
	}	

}%
