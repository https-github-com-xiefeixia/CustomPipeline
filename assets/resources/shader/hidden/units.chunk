vec3 RGBToHSL(vec3 color) {
    float minVal = min(min(color.r, color.g), color.b); 
    float maxVal = max(max(color.r, color.g), color.b);
    float delta = maxVal - minVal;

    float h = 0.0;
    float s = 0.0;
    float l = (maxVal + minVal) / 2.0;

    if (maxVal != minVal) {
        if (l < 0.5) {
            s = delta / (maxVal + minVal);
        } else {
            s = delta / (2.0 - maxVal - minVal);
        }

        if (color.r == maxVal) {
            h = (color.g - color.b) / delta + (color.g < color.b ? 6.0 : 0.0); // + (g < b ? 6 : 0);
        } else if (color.g == maxVal) {
            h = 2.0 + (color.b - color.r) / delta;
        } else {
            h = 4.0 + (color.r - color.g) / delta;
        }

        h *= 60.0;
        if (h < 0.0) {
            h += 360.0; 
        }
    }

    return vec3(h / 360.0, s, l); 
}

float saturate(float value) {
    return clamp(value, 0.0, 1.0);
}

vec2 saturate(vec2 value){
    return vec2(clamp(value.x, 0.0, 1.0), clamp(value.y, 0.0, 1.0));
}

vec3 saturate(vec3 value){
    return vec3(clamp(value.x, 0.0, 1.0), clamp(value.y, 0.0, 1.0), clamp(value.z, 0.0, 1.0));
}

float frac(float value) {
    return value - floor(value); 
}

vec2 frac(vec2 value) {
    return vec2(value.x - floor(value.x), value.y - floor(value.y));
}

vec4 lerp(vec4 src, vec4 tar, float power){
    float factor = min(max(power, 0.0), 1.0); // 限制power在[0,1]范围内
    vec4 result = src * (1.0 - factor) + tar * factor;
    return result;
}


vec3 lerp(vec3 src, vec3 tar, float power){
    float factor = min(max(power, 0.0), 1.0); // 限制power在[0,1]范围内
    vec3 result = src * (1.0 - factor) + tar * factor;
    return result;
}

vec3 lerp(float src, vec3 tar, float power){
    float factor = min(max(power, 0.0), 1.0); // 限制power在[0,1]范围内
    vec3 result;
    result.x =  src * (1.0 - factor) + tar.x * factor;   // float src 需要转换为 float3 所以需要变成 vec3(src，0，0) ？ 好像效果更糟糕
    result.y =  src * (1.0 - factor) + tar.y * factor; 
    result.z =  src * (1.0 - factor) + tar.z * factor; 
    return result;
}

vec2 lerp(vec2 src, vec2 tar, float power){ 
    float factor = min(max(power, 0.0), 1.0); // 限制power在[0,1]范围内
    vec2 result = src * (1.0 - factor) + tar * factor;
    return result;
}

float lerp(float src, float tar, float power){
    float factor = min(max(power, 0.0), 1.0); // 限制power在[0,1]范围内
    float result = src * (1.0 - factor) + tar * factor;
    return result;
}


float rand(vec3 co){
    return frac( sin( dot( co.xyz ,vec3(12.9898,78.233, 137.9462) ) ) * 43758.5453);
} 

vec3 pow3(vec3 src, float value) {
  return vec3(pow(src.x, value), pow(src.y, value), pow(src.z, value)); 
}

vec3 BlendVividLightf(vec3 base, vec3 blend)
{
    vec3 result;
    float luminance = dot(base.rgb, vec3(0.2126, 0.7152, 0.0722));
    float blendLuminance = dot(blend.rgb, vec3(0.2126, 0.7152, 0.0722));
    float ratio = blendLuminance / luminance;
    result.rgb = mix(base.rgb, vec3(1.0), step(0.5, ratio));
    // result.a = base.a;
    return result;
}

vec3 HSLToRGB(vec3 hsl) {
    float hue = hsl.x;
    float sat = hsl.y;
    float lum = hsl.z;

    float c = (1.0 - abs(2.0 * lum - 1.0)) * sat;
    float x = c * (1.0 - abs(mod(hue / 60.0, 2.0) - 1.0));
    float m = lum - c / 2.0;

    vec3 rgb = vec3(0.0);
    if (hue < 60.0) {
        rgb = vec3(c, x, 0.0);
    } else if (hue < 120.0) {
        rgb = vec3(x, c, 0.0);
    } else if (hue < 180.0) {
        rgb = vec3(0.0, c, x);
    } else if (hue < 240.0) {
        rgb = vec3(0.0, x, c);
    } else if (hue < 300.0) {
        rgb = vec3(x, 0.0, c);
    } else {
        rgb = vec3(c, 0.0, x);
    }

    return rgb + m;
}

float minimum_distance(vec2 v, vec2 w, vec2 p) {
    // Return minimum distance between line segment vw and point p
    //const float l2 = length_squared(v, w);  // i.e. |w-v|^2 -  avoid a sqrt
    float l2 = distance(v, w) * distance(v, w);  // i.e. |w-v|^2 -  avoid a sqrt
    if (l2 == 0.0) return distance(p, v);   // v == w case
    // Consider the line extending the segment, parameterized as v + t (w - v).
    // We find projection of point p onto the line. 
    // It falls where t = [(p-v) . (w-v)] / |w-v|^2
    float t = dot(p - v, w - v) / l2;
    if (t < 0.0) return distance(p, v);       // Beyond the 'v' end of the segment
    else if (t > 1.0) return distance(p, w);  // Beyond the 'w' end of the segment
    vec2 projection = v + t * (w - v);  // Projection falls on the segment
    return distance(p, projection);
}