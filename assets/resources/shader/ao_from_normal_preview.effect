// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      properties: &props
        mainTex:        { value: white }
        correctTex:     { value: white }

        aoBlend:        { value: 0.0}
        finalBias:       { value: 0.0}
        finalContrast:    { value: 0.0}
        gamaCorrection:    { value: 0.0}
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USElOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USElOCAL
      pos = cc_matWorld * pos; 
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color; 

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <hidden/units>
  uniform Constant {
      float  aoBlend;
      float  finalBias;
      float  finalContrast;
      float  gamaCorrection;
  };
  in vec4 color;
  in vec2 uv0;
  uniform sampler2D mainTex;
  uniform sampler2D correctTex;

  vec4 frag ()
	{
    vec2 _mainTex = texture(mainTex, uv0).xy;

    float AO = lerp( _mainTex.x, _mainTex.y, aoBlend);
    
    AO += finalBias;
    AO = pow( AO, finalContrast );
    AO = saturate( AO );

    return vec4( AO, AO, AO, 1 );
	}

}%
